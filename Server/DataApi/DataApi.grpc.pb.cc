// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DataApi.proto

#include "DataApi.pb.h"
#include "DataApi.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace DataApi {

static const char* FileBrowser_method_names[] = {
  "/DataApi.FileBrowser/GetFileList",
  "/DataApi.FileBrowser/GetImageInfo",
};

std::unique_ptr< FileBrowser::Stub> FileBrowser::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileBrowser::Stub> stub(new FileBrowser::Stub(channel));
  return stub;
}

FileBrowser::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetFileList_(FileBrowser_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImageInfo_(FileBrowser_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileBrowser::Stub::GetFileList(::grpc::ClientContext* context, const ::DataApi::FileListRequest& request, ::DataApi::FileList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DataApi::FileListRequest, ::DataApi::FileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFileList_, context, request, response);
}

void FileBrowser::Stub::experimental_async::GetFileList(::grpc::ClientContext* context, const ::DataApi::FileListRequest* request, ::DataApi::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DataApi::FileListRequest, ::DataApi::FileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileList_, context, request, response, std::move(f));
}

void FileBrowser::Stub::experimental_async::GetFileList(::grpc::ClientContext* context, const ::DataApi::FileListRequest* request, ::DataApi::FileList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DataApi::FileList>* FileBrowser::Stub::PrepareAsyncGetFileListRaw(::grpc::ClientContext* context, const ::DataApi::FileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DataApi::FileList, ::DataApi::FileListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFileList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DataApi::FileList>* FileBrowser::Stub::AsyncGetFileListRaw(::grpc::ClientContext* context, const ::DataApi::FileListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FileBrowser::Stub::GetImageInfo(::grpc::ClientContext* context, const ::DataApi::ImageInfoRequest& request, ::DataApi::ImageInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DataApi::ImageInfoRequest, ::DataApi::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImageInfo_, context, request, response);
}

void FileBrowser::Stub::experimental_async::GetImageInfo(::grpc::ClientContext* context, const ::DataApi::ImageInfoRequest* request, ::DataApi::ImageInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DataApi::ImageInfoRequest, ::DataApi::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImageInfo_, context, request, response, std::move(f));
}

void FileBrowser::Stub::experimental_async::GetImageInfo(::grpc::ClientContext* context, const ::DataApi::ImageInfoRequest* request, ::DataApi::ImageInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImageInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DataApi::ImageInfo>* FileBrowser::Stub::PrepareAsyncGetImageInfoRaw(::grpc::ClientContext* context, const ::DataApi::ImageInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DataApi::ImageInfo, ::DataApi::ImageInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImageInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DataApi::ImageInfo>* FileBrowser::Stub::AsyncGetImageInfoRaw(::grpc::ClientContext* context, const ::DataApi::ImageInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImageInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

FileBrowser::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileBrowser_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileBrowser::Service, ::DataApi::FileListRequest, ::DataApi::FileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileBrowser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DataApi::FileListRequest* req,
             ::DataApi::FileList* resp) {
               return service->GetFileList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileBrowser_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileBrowser::Service, ::DataApi::ImageInfoRequest, ::DataApi::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FileBrowser::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DataApi::ImageInfoRequest* req,
             ::DataApi::ImageInfo* resp) {
               return service->GetImageInfo(ctx, req, resp);
             }, this)));
}

FileBrowser::Service::~Service() {
}

::grpc::Status FileBrowser::Service::GetFileList(::grpc::ServerContext* context, const ::DataApi::FileListRequest* request, ::DataApi::FileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileBrowser::Service::GetImageInfo(::grpc::ServerContext* context, const ::DataApi::ImageInfoRequest* request, ::DataApi::ImageInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace DataApi

