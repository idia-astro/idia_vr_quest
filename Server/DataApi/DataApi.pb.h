// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataApi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DataApi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DataApi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DataApi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DataApi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataApi_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_DataApi_2eproto_metadata_getter(int index);
namespace DataApi {
class DirectoryInfo;
struct DirectoryInfoDefaultTypeInternal;
extern DirectoryInfoDefaultTypeInternal _DirectoryInfo_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileList;
struct FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class FileListRequest;
struct FileListRequestDefaultTypeInternal;
extern FileListRequestDefaultTypeInternal _FileListRequest_default_instance_;
class ImageInfo;
struct ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class ImageInfoRequest;
struct ImageInfoRequestDefaultTypeInternal;
extern ImageInfoRequestDefaultTypeInternal _ImageInfoRequest_default_instance_;
}  // namespace DataApi
PROTOBUF_NAMESPACE_OPEN
template<> ::DataApi::DirectoryInfo* Arena::CreateMaybeMessage<::DataApi::DirectoryInfo>(Arena*);
template<> ::DataApi::FileInfo* Arena::CreateMaybeMessage<::DataApi::FileInfo>(Arena*);
template<> ::DataApi::FileList* Arena::CreateMaybeMessage<::DataApi::FileList>(Arena*);
template<> ::DataApi::FileListRequest* Arena::CreateMaybeMessage<::DataApi::FileListRequest>(Arena*);
template<> ::DataApi::ImageInfo* Arena::CreateMaybeMessage<::DataApi::ImageInfo>(Arena*);
template<> ::DataApi::ImageInfoRequest* Arena::CreateMaybeMessage<::DataApi::ImageInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DataApi {

enum FileType : int {
  Unknown = 0,
  Fits = 1,
  Hdf5 = 2,
  Mhd = 3,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileType_IsValid(int value);
constexpr FileType FileType_MIN = Unknown;
constexpr FileType FileType_MAX = Mhd;
constexpr int FileType_ARRAYSIZE = FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor();
template<typename T>
inline const std::string& FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileType_descriptor(), enum_t_value);
}
inline bool FileType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileType>(
    FileType_descriptor(), name, value);
}
// ===================================================================

class FileListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataApi.FileListRequest) */ {
 public:
  inline FileListRequest() : FileListRequest(nullptr) {}
  virtual ~FileListRequest();
  explicit constexpr FileListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileListRequest(const FileListRequest& from);
  FileListRequest(FileListRequest&& from) noexcept
    : FileListRequest() {
    *this = ::std::move(from);
  }

  inline FileListRequest& operator=(const FileListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileListRequest& operator=(FileListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileListRequest* internal_default_instance() {
    return reinterpret_cast<const FileListRequest*>(
               &_FileListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileListRequest& a, FileListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileListRequest* New() const final {
    return CreateMaybeMessage<FileListRequest>(nullptr);
  }

  FileListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileListRequest& from);
  void MergeFrom(const FileListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataApi.FileListRequest";
  }
  protected:
  explicit FileListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DataApi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoryNameFieldNumber = 1,
  };
  // string directoryName = 1;
  void clear_directoryname();
  const std::string& directoryname() const;
  void set_directoryname(const std::string& value);
  void set_directoryname(std::string&& value);
  void set_directoryname(const char* value);
  void set_directoryname(const char* value, size_t size);
  std::string* mutable_directoryname();
  std::string* release_directoryname();
  void set_allocated_directoryname(std::string* directoryname);
  private:
  const std::string& _internal_directoryname() const;
  void _internal_set_directoryname(const std::string& value);
  std::string* _internal_mutable_directoryname();
  public:

  // @@protoc_insertion_point(class_scope:DataApi.FileListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directoryname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataApi_2eproto;
};
// -------------------------------------------------------------------

class FileList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataApi.FileList) */ {
 public:
  inline FileList() : FileList(nullptr) {}
  virtual ~FileList();
  explicit constexpr FileList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileList(const FileList& from);
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }
  inline void Swap(FileList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const final {
    return CreateMaybeMessage<FileList>(nullptr);
  }

  FileList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataApi.FileList";
  }
  protected:
  explicit FileList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DataApi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubDirectoriesFieldNumber = 2,
    kFilesFieldNumber = 3,
    kDirectoryNameFieldNumber = 1,
  };
  // repeated .DataApi.DirectoryInfo subDirectories = 2;
  int subdirectories_size() const;
  private:
  int _internal_subdirectories_size() const;
  public:
  void clear_subdirectories();
  ::DataApi::DirectoryInfo* mutable_subdirectories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::DirectoryInfo >*
      mutable_subdirectories();
  private:
  const ::DataApi::DirectoryInfo& _internal_subdirectories(int index) const;
  ::DataApi::DirectoryInfo* _internal_add_subdirectories();
  public:
  const ::DataApi::DirectoryInfo& subdirectories(int index) const;
  ::DataApi::DirectoryInfo* add_subdirectories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::DirectoryInfo >&
      subdirectories() const;

  // repeated .DataApi.FileInfo files = 3;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::DataApi::FileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::FileInfo >*
      mutable_files();
  private:
  const ::DataApi::FileInfo& _internal_files(int index) const;
  ::DataApi::FileInfo* _internal_add_files();
  public:
  const ::DataApi::FileInfo& files(int index) const;
  ::DataApi::FileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::FileInfo >&
      files() const;

  // string directoryName = 1;
  void clear_directoryname();
  const std::string& directoryname() const;
  void set_directoryname(const std::string& value);
  void set_directoryname(std::string&& value);
  void set_directoryname(const char* value);
  void set_directoryname(const char* value, size_t size);
  std::string* mutable_directoryname();
  std::string* release_directoryname();
  void set_allocated_directoryname(std::string* directoryname);
  private:
  const std::string& _internal_directoryname() const;
  void _internal_set_directoryname(const std::string& value);
  std::string* _internal_mutable_directoryname();
  public:

  // @@protoc_insertion_point(class_scope:DataApi.FileList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::DirectoryInfo > subdirectories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::FileInfo > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directoryname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataApi_2eproto;
};
// -------------------------------------------------------------------

class DirectoryInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataApi.DirectoryInfo) */ {
 public:
  inline DirectoryInfo() : DirectoryInfo(nullptr) {}
  virtual ~DirectoryInfo();
  explicit constexpr DirectoryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectoryInfo(const DirectoryInfo& from);
  DirectoryInfo(DirectoryInfo&& from) noexcept
    : DirectoryInfo() {
    *this = ::std::move(from);
  }

  inline DirectoryInfo& operator=(const DirectoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectoryInfo& operator=(DirectoryInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectoryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectoryInfo* internal_default_instance() {
    return reinterpret_cast<const DirectoryInfo*>(
               &_DirectoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DirectoryInfo& a, DirectoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectoryInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectoryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectoryInfo* New() const final {
    return CreateMaybeMessage<DirectoryInfo>(nullptr);
  }

  DirectoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectoryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectoryInfo& from);
  void MergeFrom(const DirectoryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataApi.DirectoryInfo";
  }
  protected:
  explicit DirectoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DataApi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNumItemsFieldNumber = 2,
    kDateFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 numItems = 2;
  void clear_numitems();
  ::PROTOBUF_NAMESPACE_ID::int64 numitems() const;
  void set_numitems(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_numitems() const;
  void _internal_set_numitems(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 date = 3;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DataApi.DirectoryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 numitems_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataApi_2eproto;
};
// -------------------------------------------------------------------

class FileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataApi.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  virtual ~FileInfo();
  explicit constexpr FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataApi.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DataApi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kDateFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 date = 3;
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::int64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DataApi.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataApi_2eproto;
};
// -------------------------------------------------------------------

class ImageInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataApi.ImageInfo) */ {
 public:
  inline ImageInfo() : ImageInfo(nullptr) {}
  virtual ~ImageInfo();
  explicit constexpr ImageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfo(const ImageInfo& from);
  ImageInfo(ImageInfo&& from) noexcept
    : ImageInfo() {
    *this = ::std::move(from);
  }

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfo& operator=(ImageInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageInfo*>(
               &_ImageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImageInfo& a, ImageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfo* New() const final {
    return CreateMaybeMessage<ImageInfo>(nullptr);
  }

  ImageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataApi.ImageInfo";
  }
  protected:
  explicit ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DataApi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 3,
    kFileNameFieldNumber = 1,
    kFileTypeFieldNumber = 2,
  };
  // repeated int32 dimensions = 3;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dimensions() const;
  void _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dimensions();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dimensions(int index) const;
  void set_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dimensions();

  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .DataApi.FileType fileType = 2;
  void clear_filetype();
  ::DataApi::FileType filetype() const;
  void set_filetype(::DataApi::FileType value);
  private:
  ::DataApi::FileType _internal_filetype() const;
  void _internal_set_filetype(::DataApi::FileType value);
  public:

  // @@protoc_insertion_point(class_scope:DataApi.ImageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dimensions_;
  mutable std::atomic<int> _dimensions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  int filetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataApi_2eproto;
};
// -------------------------------------------------------------------

class ImageInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataApi.ImageInfoRequest) */ {
 public:
  inline ImageInfoRequest() : ImageInfoRequest(nullptr) {}
  virtual ~ImageInfoRequest();
  explicit constexpr ImageInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfoRequest(const ImageInfoRequest& from);
  ImageInfoRequest(ImageInfoRequest&& from) noexcept
    : ImageInfoRequest() {
    *this = ::std::move(from);
  }

  inline ImageInfoRequest& operator=(const ImageInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoRequest& operator=(ImageInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ImageInfoRequest*>(
               &_ImageInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ImageInfoRequest& a, ImageInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageInfoRequest* New() const final {
    return CreateMaybeMessage<ImageInfoRequest>(nullptr);
  }

  ImageInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageInfoRequest& from);
  void MergeFrom(const ImageInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataApi.ImageInfoRequest";
  }
  protected:
  explicit ImageInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DataApi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoryNameFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kHduNameFieldNumber = 3,
    kHduNumFieldNumber = 4,
  };
  // string directoryName = 1;
  void clear_directoryname();
  const std::string& directoryname() const;
  void set_directoryname(const std::string& value);
  void set_directoryname(std::string&& value);
  void set_directoryname(const char* value);
  void set_directoryname(const char* value, size_t size);
  std::string* mutable_directoryname();
  std::string* release_directoryname();
  void set_allocated_directoryname(std::string* directoryname);
  private:
  const std::string& _internal_directoryname() const;
  void _internal_set_directoryname(const std::string& value);
  std::string* _internal_mutable_directoryname();
  public:

  // string fileName = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string hduName = 3;
  void clear_hduname();
  const std::string& hduname() const;
  void set_hduname(const std::string& value);
  void set_hduname(std::string&& value);
  void set_hduname(const char* value);
  void set_hduname(const char* value, size_t size);
  std::string* mutable_hduname();
  std::string* release_hduname();
  void set_allocated_hduname(std::string* hduname);
  private:
  const std::string& _internal_hduname() const;
  void _internal_set_hduname(const std::string& value);
  std::string* _internal_mutable_hduname();
  public:

  // int32 hduNum = 4;
  void clear_hdunum();
  ::PROTOBUF_NAMESPACE_ID::int32 hdunum() const;
  void set_hdunum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hdunum() const;
  void _internal_set_hdunum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DataApi.ImageInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directoryname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hduname_;
  ::PROTOBUF_NAMESPACE_ID::int32 hdunum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataApi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileListRequest

// string directoryName = 1;
inline void FileListRequest::clear_directoryname() {
  directoryname_.ClearToEmpty();
}
inline const std::string& FileListRequest::directoryname() const {
  // @@protoc_insertion_point(field_get:DataApi.FileListRequest.directoryName)
  return _internal_directoryname();
}
inline void FileListRequest::set_directoryname(const std::string& value) {
  _internal_set_directoryname(value);
  // @@protoc_insertion_point(field_set:DataApi.FileListRequest.directoryName)
}
inline std::string* FileListRequest::mutable_directoryname() {
  // @@protoc_insertion_point(field_mutable:DataApi.FileListRequest.directoryName)
  return _internal_mutable_directoryname();
}
inline const std::string& FileListRequest::_internal_directoryname() const {
  return directoryname_.Get();
}
inline void FileListRequest::_internal_set_directoryname(const std::string& value) {
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileListRequest::set_directoryname(std::string&& value) {
  
  directoryname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.FileListRequest.directoryName)
}
inline void FileListRequest::set_directoryname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.FileListRequest.directoryName)
}
inline void FileListRequest::set_directoryname(const char* value,
    size_t size) {
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.FileListRequest.directoryName)
}
inline std::string* FileListRequest::_internal_mutable_directoryname() {
  
  return directoryname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileListRequest::release_directoryname() {
  // @@protoc_insertion_point(field_release:DataApi.FileListRequest.directoryName)
  return directoryname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileListRequest::set_allocated_directoryname(std::string* directoryname) {
  if (directoryname != nullptr) {
    
  } else {
    
  }
  directoryname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directoryname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.FileListRequest.directoryName)
}

// -------------------------------------------------------------------

// FileList

// string directoryName = 1;
inline void FileList::clear_directoryname() {
  directoryname_.ClearToEmpty();
}
inline const std::string& FileList::directoryname() const {
  // @@protoc_insertion_point(field_get:DataApi.FileList.directoryName)
  return _internal_directoryname();
}
inline void FileList::set_directoryname(const std::string& value) {
  _internal_set_directoryname(value);
  // @@protoc_insertion_point(field_set:DataApi.FileList.directoryName)
}
inline std::string* FileList::mutable_directoryname() {
  // @@protoc_insertion_point(field_mutable:DataApi.FileList.directoryName)
  return _internal_mutable_directoryname();
}
inline const std::string& FileList::_internal_directoryname() const {
  return directoryname_.Get();
}
inline void FileList::_internal_set_directoryname(const std::string& value) {
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileList::set_directoryname(std::string&& value) {
  
  directoryname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.FileList.directoryName)
}
inline void FileList::set_directoryname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.FileList.directoryName)
}
inline void FileList::set_directoryname(const char* value,
    size_t size) {
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.FileList.directoryName)
}
inline std::string* FileList::_internal_mutable_directoryname() {
  
  return directoryname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileList::release_directoryname() {
  // @@protoc_insertion_point(field_release:DataApi.FileList.directoryName)
  return directoryname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileList::set_allocated_directoryname(std::string* directoryname) {
  if (directoryname != nullptr) {
    
  } else {
    
  }
  directoryname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directoryname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.FileList.directoryName)
}

// repeated .DataApi.DirectoryInfo subDirectories = 2;
inline int FileList::_internal_subdirectories_size() const {
  return subdirectories_.size();
}
inline int FileList::subdirectories_size() const {
  return _internal_subdirectories_size();
}
inline void FileList::clear_subdirectories() {
  subdirectories_.Clear();
}
inline ::DataApi::DirectoryInfo* FileList::mutable_subdirectories(int index) {
  // @@protoc_insertion_point(field_mutable:DataApi.FileList.subDirectories)
  return subdirectories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::DirectoryInfo >*
FileList::mutable_subdirectories() {
  // @@protoc_insertion_point(field_mutable_list:DataApi.FileList.subDirectories)
  return &subdirectories_;
}
inline const ::DataApi::DirectoryInfo& FileList::_internal_subdirectories(int index) const {
  return subdirectories_.Get(index);
}
inline const ::DataApi::DirectoryInfo& FileList::subdirectories(int index) const {
  // @@protoc_insertion_point(field_get:DataApi.FileList.subDirectories)
  return _internal_subdirectories(index);
}
inline ::DataApi::DirectoryInfo* FileList::_internal_add_subdirectories() {
  return subdirectories_.Add();
}
inline ::DataApi::DirectoryInfo* FileList::add_subdirectories() {
  // @@protoc_insertion_point(field_add:DataApi.FileList.subDirectories)
  return _internal_add_subdirectories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::DirectoryInfo >&
FileList::subdirectories() const {
  // @@protoc_insertion_point(field_list:DataApi.FileList.subDirectories)
  return subdirectories_;
}

// repeated .DataApi.FileInfo files = 3;
inline int FileList::_internal_files_size() const {
  return files_.size();
}
inline int FileList::files_size() const {
  return _internal_files_size();
}
inline void FileList::clear_files() {
  files_.Clear();
}
inline ::DataApi::FileInfo* FileList::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:DataApi.FileList.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::FileInfo >*
FileList::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:DataApi.FileList.files)
  return &files_;
}
inline const ::DataApi::FileInfo& FileList::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::DataApi::FileInfo& FileList::files(int index) const {
  // @@protoc_insertion_point(field_get:DataApi.FileList.files)
  return _internal_files(index);
}
inline ::DataApi::FileInfo* FileList::_internal_add_files() {
  return files_.Add();
}
inline ::DataApi::FileInfo* FileList::add_files() {
  // @@protoc_insertion_point(field_add:DataApi.FileList.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataApi::FileInfo >&
FileList::files() const {
  // @@protoc_insertion_point(field_list:DataApi.FileList.files)
  return files_;
}

// -------------------------------------------------------------------

// DirectoryInfo

// string name = 1;
inline void DirectoryInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DirectoryInfo::name() const {
  // @@protoc_insertion_point(field_get:DataApi.DirectoryInfo.name)
  return _internal_name();
}
inline void DirectoryInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DataApi.DirectoryInfo.name)
}
inline std::string* DirectoryInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DataApi.DirectoryInfo.name)
  return _internal_mutable_name();
}
inline const std::string& DirectoryInfo::_internal_name() const {
  return name_.Get();
}
inline void DirectoryInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DirectoryInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.DirectoryInfo.name)
}
inline void DirectoryInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.DirectoryInfo.name)
}
inline void DirectoryInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.DirectoryInfo.name)
}
inline std::string* DirectoryInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DirectoryInfo::release_name() {
  // @@protoc_insertion_point(field_release:DataApi.DirectoryInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirectoryInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.DirectoryInfo.name)
}

// int64 numItems = 2;
inline void DirectoryInfo::clear_numitems() {
  numitems_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DirectoryInfo::_internal_numitems() const {
  return numitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DirectoryInfo::numitems() const {
  // @@protoc_insertion_point(field_get:DataApi.DirectoryInfo.numItems)
  return _internal_numitems();
}
inline void DirectoryInfo::_internal_set_numitems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  numitems_ = value;
}
inline void DirectoryInfo::set_numitems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_numitems(value);
  // @@protoc_insertion_point(field_set:DataApi.DirectoryInfo.numItems)
}

// int64 date = 3;
inline void DirectoryInfo::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DirectoryInfo::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DirectoryInfo::date() const {
  // @@protoc_insertion_point(field_get:DataApi.DirectoryInfo.date)
  return _internal_date();
}
inline void DirectoryInfo::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_ = value;
}
inline void DirectoryInfo::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:DataApi.DirectoryInfo.date)
}

// -------------------------------------------------------------------

// FileInfo

// string name = 1;
inline void FileInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:DataApi.FileInfo.name)
  return _internal_name();
}
inline void FileInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DataApi.FileInfo.name)
}
inline std::string* FileInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DataApi.FileInfo.name)
  return _internal_mutable_name();
}
inline const std::string& FileInfo::_internal_name() const {
  return name_.Get();
}
inline void FileInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.FileInfo.name)
}
inline void FileInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.FileInfo.name)
}
inline void FileInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.FileInfo.name)
}
inline std::string* FileInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:DataApi.FileInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.FileInfo.name)
}

// int64 size = 2;
inline void FileInfo::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileInfo::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:DataApi.FileInfo.size)
  return _internal_size();
}
inline void FileInfo::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void FileInfo::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DataApi.FileInfo.size)
}

// int64 date = 3;
inline void FileInfo::clear_date() {
  date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileInfo::_internal_date() const {
  return date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileInfo::date() const {
  // @@protoc_insertion_point(field_get:DataApi.FileInfo.date)
  return _internal_date();
}
inline void FileInfo::_internal_set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  date_ = value;
}
inline void FileInfo::set_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:DataApi.FileInfo.date)
}

// -------------------------------------------------------------------

// ImageInfo

// string fileName = 1;
inline void ImageInfo::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& ImageInfo::filename() const {
  // @@protoc_insertion_point(field_get:DataApi.ImageInfo.fileName)
  return _internal_filename();
}
inline void ImageInfo::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:DataApi.ImageInfo.fileName)
}
inline std::string* ImageInfo::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:DataApi.ImageInfo.fileName)
  return _internal_mutable_filename();
}
inline const std::string& ImageInfo::_internal_filename() const {
  return filename_.Get();
}
inline void ImageInfo::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageInfo::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.ImageInfo.fileName)
}
inline void ImageInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.ImageInfo.fileName)
}
inline void ImageInfo::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.ImageInfo.fileName)
}
inline std::string* ImageInfo::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageInfo::release_filename() {
  // @@protoc_insertion_point(field_release:DataApi.ImageInfo.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.ImageInfo.fileName)
}

// .DataApi.FileType fileType = 2;
inline void ImageInfo::clear_filetype() {
  filetype_ = 0;
}
inline ::DataApi::FileType ImageInfo::_internal_filetype() const {
  return static_cast< ::DataApi::FileType >(filetype_);
}
inline ::DataApi::FileType ImageInfo::filetype() const {
  // @@protoc_insertion_point(field_get:DataApi.ImageInfo.fileType)
  return _internal_filetype();
}
inline void ImageInfo::_internal_set_filetype(::DataApi::FileType value) {
  
  filetype_ = value;
}
inline void ImageInfo::set_filetype(::DataApi::FileType value) {
  _internal_set_filetype(value);
  // @@protoc_insertion_point(field_set:DataApi.ImageInfo.fileType)
}

// repeated int32 dimensions = 3;
inline int ImageInfo::_internal_dimensions_size() const {
  return dimensions_.size();
}
inline int ImageInfo::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void ImageInfo::clear_dimensions() {
  dimensions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageInfo::_internal_dimensions(int index) const {
  return dimensions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageInfo::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:DataApi.ImageInfo.dimensions)
  return _internal_dimensions(index);
}
inline void ImageInfo::set_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:DataApi.ImageInfo.dimensions)
}
inline void ImageInfo::_internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dimensions_.Add(value);
}
inline void ImageInfo::add_dimensions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dimensions(value);
  // @@protoc_insertion_point(field_add:DataApi.ImageInfo.dimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageInfo::_internal_dimensions() const {
  return dimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ImageInfo::dimensions() const {
  // @@protoc_insertion_point(field_list:DataApi.ImageInfo.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageInfo::_internal_mutable_dimensions() {
  return &dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ImageInfo::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:DataApi.ImageInfo.dimensions)
  return _internal_mutable_dimensions();
}

// -------------------------------------------------------------------

// ImageInfoRequest

// string directoryName = 1;
inline void ImageInfoRequest::clear_directoryname() {
  directoryname_.ClearToEmpty();
}
inline const std::string& ImageInfoRequest::directoryname() const {
  // @@protoc_insertion_point(field_get:DataApi.ImageInfoRequest.directoryName)
  return _internal_directoryname();
}
inline void ImageInfoRequest::set_directoryname(const std::string& value) {
  _internal_set_directoryname(value);
  // @@protoc_insertion_point(field_set:DataApi.ImageInfoRequest.directoryName)
}
inline std::string* ImageInfoRequest::mutable_directoryname() {
  // @@protoc_insertion_point(field_mutable:DataApi.ImageInfoRequest.directoryName)
  return _internal_mutable_directoryname();
}
inline const std::string& ImageInfoRequest::_internal_directoryname() const {
  return directoryname_.Get();
}
inline void ImageInfoRequest::_internal_set_directoryname(const std::string& value) {
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageInfoRequest::set_directoryname(std::string&& value) {
  
  directoryname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.ImageInfoRequest.directoryName)
}
inline void ImageInfoRequest::set_directoryname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.ImageInfoRequest.directoryName)
}
inline void ImageInfoRequest::set_directoryname(const char* value,
    size_t size) {
  
  directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.ImageInfoRequest.directoryName)
}
inline std::string* ImageInfoRequest::_internal_mutable_directoryname() {
  
  return directoryname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageInfoRequest::release_directoryname() {
  // @@protoc_insertion_point(field_release:DataApi.ImageInfoRequest.directoryName)
  return directoryname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageInfoRequest::set_allocated_directoryname(std::string* directoryname) {
  if (directoryname != nullptr) {
    
  } else {
    
  }
  directoryname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directoryname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.ImageInfoRequest.directoryName)
}

// string fileName = 2;
inline void ImageInfoRequest::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& ImageInfoRequest::filename() const {
  // @@protoc_insertion_point(field_get:DataApi.ImageInfoRequest.fileName)
  return _internal_filename();
}
inline void ImageInfoRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:DataApi.ImageInfoRequest.fileName)
}
inline std::string* ImageInfoRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:DataApi.ImageInfoRequest.fileName)
  return _internal_mutable_filename();
}
inline const std::string& ImageInfoRequest::_internal_filename() const {
  return filename_.Get();
}
inline void ImageInfoRequest::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageInfoRequest::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.ImageInfoRequest.fileName)
}
inline void ImageInfoRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.ImageInfoRequest.fileName)
}
inline void ImageInfoRequest::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.ImageInfoRequest.fileName)
}
inline std::string* ImageInfoRequest::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageInfoRequest::release_filename() {
  // @@protoc_insertion_point(field_release:DataApi.ImageInfoRequest.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageInfoRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.ImageInfoRequest.fileName)
}

// string hduName = 3;
inline void ImageInfoRequest::clear_hduname() {
  hduname_.ClearToEmpty();
}
inline const std::string& ImageInfoRequest::hduname() const {
  // @@protoc_insertion_point(field_get:DataApi.ImageInfoRequest.hduName)
  return _internal_hduname();
}
inline void ImageInfoRequest::set_hduname(const std::string& value) {
  _internal_set_hduname(value);
  // @@protoc_insertion_point(field_set:DataApi.ImageInfoRequest.hduName)
}
inline std::string* ImageInfoRequest::mutable_hduname() {
  // @@protoc_insertion_point(field_mutable:DataApi.ImageInfoRequest.hduName)
  return _internal_mutable_hduname();
}
inline const std::string& ImageInfoRequest::_internal_hduname() const {
  return hduname_.Get();
}
inline void ImageInfoRequest::_internal_set_hduname(const std::string& value) {
  
  hduname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImageInfoRequest::set_hduname(std::string&& value) {
  
  hduname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DataApi.ImageInfoRequest.hduName)
}
inline void ImageInfoRequest::set_hduname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hduname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DataApi.ImageInfoRequest.hduName)
}
inline void ImageInfoRequest::set_hduname(const char* value,
    size_t size) {
  
  hduname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DataApi.ImageInfoRequest.hduName)
}
inline std::string* ImageInfoRequest::_internal_mutable_hduname() {
  
  return hduname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImageInfoRequest::release_hduname() {
  // @@protoc_insertion_point(field_release:DataApi.ImageInfoRequest.hduName)
  return hduname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageInfoRequest::set_allocated_hduname(std::string* hduname) {
  if (hduname != nullptr) {
    
  } else {
    
  }
  hduname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hduname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DataApi.ImageInfoRequest.hduName)
}

// int32 hduNum = 4;
inline void ImageInfoRequest::clear_hdunum() {
  hdunum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageInfoRequest::_internal_hdunum() const {
  return hdunum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImageInfoRequest::hdunum() const {
  // @@protoc_insertion_point(field_get:DataApi.ImageInfoRequest.hduNum)
  return _internal_hdunum();
}
inline void ImageInfoRequest::_internal_set_hdunum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hdunum_ = value;
}
inline void ImageInfoRequest::set_hdunum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hdunum(value);
  // @@protoc_insertion_point(field_set:DataApi.ImageInfoRequest.hduNum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataApi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DataApi::FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataApi::FileType>() {
  return ::DataApi::FileType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DataApi_2eproto
