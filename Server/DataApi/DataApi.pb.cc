// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataApi.proto

#include "DataApi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace DataApi {
constexpr FileListRequest::FileListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directoryname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FileListRequestDefaultTypeInternal {
  constexpr FileListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileListRequestDefaultTypeInternal() {}
  union {
    FileListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileListRequestDefaultTypeInternal _FileListRequest_default_instance_;
constexpr FileList::FileList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subdirectories_()
  , files_()
  , directoryname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FileListDefaultTypeInternal {
  constexpr FileListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileListDefaultTypeInternal() {}
  union {
    FileList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileListDefaultTypeInternal _FileList_default_instance_;
constexpr DirectoryInfo::DirectoryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , numitems_(PROTOBUF_LONGLONG(0))
  , date_(PROTOBUF_LONGLONG(0)){}
struct DirectoryInfoDefaultTypeInternal {
  constexpr DirectoryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectoryInfoDefaultTypeInternal() {}
  union {
    DirectoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectoryInfoDefaultTypeInternal _DirectoryInfo_default_instance_;
constexpr FileInfo::FileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(PROTOBUF_LONGLONG(0))
  , date_(PROTOBUF_LONGLONG(0)){}
struct FileInfoDefaultTypeInternal {
  constexpr FileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileInfoDefaultTypeInternal _FileInfo_default_instance_;
constexpr ImageInfo::ImageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dimensions_()
  , _dimensions_cached_byte_size_()
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filetype_(0)
{}
struct ImageInfoDefaultTypeInternal {
  constexpr ImageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageInfoDefaultTypeInternal() {}
  union {
    ImageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
constexpr ImageInfoRequest::ImageInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directoryname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hdu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ImageInfoRequestDefaultTypeInternal {
  constexpr ImageInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageInfoRequestDefaultTypeInternal() {}
  union {
    ImageInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageInfoRequestDefaultTypeInternal _ImageInfoRequest_default_instance_;
}  // namespace DataApi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DataApi_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DataApi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DataApi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DataApi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataApi::FileListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataApi::FileListRequest, directoryname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataApi::FileList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataApi::FileList, directoryname_),
  PROTOBUF_FIELD_OFFSET(::DataApi::FileList, subdirectories_),
  PROTOBUF_FIELD_OFFSET(::DataApi::FileList, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataApi::DirectoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataApi::DirectoryInfo, name_),
  PROTOBUF_FIELD_OFFSET(::DataApi::DirectoryInfo, numitems_),
  PROTOBUF_FIELD_OFFSET(::DataApi::DirectoryInfo, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataApi::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataApi::FileInfo, name_),
  PROTOBUF_FIELD_OFFSET(::DataApi::FileInfo, size_),
  PROTOBUF_FIELD_OFFSET(::DataApi::FileInfo, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfo, filename_),
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfo, filetype_),
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfo, dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfoRequest, directoryname_),
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfoRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::DataApi::ImageInfoRequest, hdu_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DataApi::FileListRequest)},
  { 6, -1, sizeof(::DataApi::FileList)},
  { 14, -1, sizeof(::DataApi::DirectoryInfo)},
  { 22, -1, sizeof(::DataApi::FileInfo)},
  { 30, -1, sizeof(::DataApi::ImageInfo)},
  { 38, -1, sizeof(::DataApi::ImageInfoRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DataApi::_FileListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DataApi::_FileList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DataApi::_DirectoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DataApi::_FileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DataApi::_ImageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DataApi::_ImageInfoRequest_default_instance_),
};

const char descriptor_table_protodef_DataApi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rDataApi.proto\022\007DataApi\"(\n\017FileListRequ"
  "est\022\025\n\rdirectoryName\030\001 \001(\t\"s\n\010FileList\022\025"
  "\n\rdirectoryName\030\001 \001(\t\022.\n\016subDirectories\030"
  "\002 \003(\0132\026.DataApi.DirectoryInfo\022 \n\005files\030\003"
  " \003(\0132\021.DataApi.FileInfo\"=\n\rDirectoryInfo"
  "\022\014\n\004name\030\001 \001(\t\022\020\n\010numItems\030\002 \001(\003\022\014\n\004date"
  "\030\003 \001(\003\"4\n\010FileInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004size"
  "\030\002 \001(\003\022\014\n\004date\030\003 \001(\003\"V\n\tImageInfo\022\020\n\010fil"
  "eName\030\001 \001(\t\022#\n\010fileType\030\002 \001(\0162\021.DataApi."
  "FileType\022\022\n\ndimensions\030\003 \003(\005\"H\n\020ImageInf"
  "oRequest\022\025\n\rdirectoryName\030\001 \001(\t\022\020\n\010fileN"
  "ame\030\002 \001(\t\022\013\n\003hdu\030\003 \001(\t*4\n\010FileType\022\013\n\007Un"
  "known\020\000\022\010\n\004Fits\020\001\022\010\n\004Hdf5\020\002\022\007\n\003Mhd\020\0032\214\001\n"
  "\013FileBrowser\022<\n\013GetFileList\022\030.DataApi.Fi"
  "leListRequest\032\021.DataApi.FileList\"\000\022\?\n\014Ge"
  "tImageInfo\022\031.DataApi.ImageInfoRequest\032\022."
  "DataApi.ImageInfo\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DataApi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataApi_2eproto = {
  false, false, 667, descriptor_table_protodef_DataApi_2eproto, "DataApi.proto", 
  &descriptor_table_DataApi_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_DataApi_2eproto::offsets,
  file_level_metadata_DataApi_2eproto, file_level_enum_descriptors_DataApi_2eproto, file_level_service_descriptors_DataApi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_DataApi_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DataApi_2eproto);
  return descriptor_table_DataApi_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DataApi_2eproto(&descriptor_table_DataApi_2eproto);
namespace DataApi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DataApi_2eproto);
  return file_level_enum_descriptors_DataApi_2eproto[0];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FileListRequest::_Internal {
 public:
};

FileListRequest::FileListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataApi.FileListRequest)
}
FileListRequest::FileListRequest(const FileListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directoryname().empty()) {
    directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directoryname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DataApi.FileListRequest)
}

void FileListRequest::SharedCtor() {
directoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileListRequest::~FileListRequest() {
  // @@protoc_insertion_point(destructor:DataApi.FileListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  directoryname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileListRequest::ArenaDtor(void* object) {
  FileListRequest* _this = reinterpret_cast< FileListRequest* >(object);
  (void)_this;
}
void FileListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DataApi.FileListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directoryname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string directoryName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directoryname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.FileListRequest.directoryName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataApi.FileListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directoryName = 1;
  if (this->directoryname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directoryname().data(), static_cast<int>(this->_internal_directoryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.FileListRequest.directoryName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directoryname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataApi.FileListRequest)
  return target;
}

size_t FileListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataApi.FileListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directoryName = 1;
  if (this->directoryname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directoryname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataApi.FileListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FileListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataApi.FileListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataApi.FileListRequest)
    MergeFrom(*source);
  }
}

void FileListRequest::MergeFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataApi.FileListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directoryname().size() > 0) {
    _internal_set_directoryname(from._internal_directoryname());
  }
}

void FileListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataApi.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileListRequest::CopyFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataApi.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListRequest::IsInitialized() const {
  return true;
}

void FileListRequest::InternalSwap(FileListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  directoryname_.Swap(&other->directoryname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileList::_Internal {
 public:
};

FileList::FileList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subdirectories_(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataApi.FileList)
}
FileList::FileList(const FileList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subdirectories_(from.subdirectories_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directoryname().empty()) {
    directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directoryname(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DataApi.FileList)
}

void FileList::SharedCtor() {
directoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileList::~FileList() {
  // @@protoc_insertion_point(destructor:DataApi.FileList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  directoryname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileList::ArenaDtor(void* object) {
  FileList* _this = reinterpret_cast< FileList* >(object);
  (void)_this;
}
void FileList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileList::Clear() {
// @@protoc_insertion_point(message_clear_start:DataApi.FileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subdirectories_.Clear();
  files_.Clear();
  directoryname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string directoryName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directoryname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.FileList.directoryName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DataApi.DirectoryInfo subDirectories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subdirectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DataApi.FileInfo files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataApi.FileList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directoryName = 1;
  if (this->directoryname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directoryname().data(), static_cast<int>(this->_internal_directoryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.FileList.directoryName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directoryname(), target);
  }

  // repeated .DataApi.DirectoryInfo subDirectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subdirectories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subdirectories(i), target, stream);
  }

  // repeated .DataApi.FileInfo files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataApi.FileList)
  return target;
}

size_t FileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataApi.FileList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DataApi.DirectoryInfo subDirectories = 2;
  total_size += 1UL * this->_internal_subdirectories_size();
  for (const auto& msg : this->subdirectories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DataApi.FileInfo files = 3;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string directoryName = 1;
  if (this->directoryname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directoryname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataApi.FileList)
  GOOGLE_DCHECK_NE(&from, this);
  const FileList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataApi.FileList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataApi.FileList)
    MergeFrom(*source);
  }
}

void FileList::MergeFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataApi.FileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subdirectories_.MergeFrom(from.subdirectories_);
  files_.MergeFrom(from.files_);
  if (from.directoryname().size() > 0) {
    _internal_set_directoryname(from._internal_directoryname());
  }
}

void FileList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataApi.FileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileList::CopyFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataApi.FileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList::IsInitialized() const {
  return true;
}

void FileList::InternalSwap(FileList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subdirectories_.InternalSwap(&other->subdirectories_);
  files_.InternalSwap(&other->files_);
  directoryname_.Swap(&other->directoryname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectoryInfo::_Internal {
 public:
};

DirectoryInfo::DirectoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataApi.DirectoryInfo)
}
DirectoryInfo::DirectoryInfo(const DirectoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&numitems_, &from.numitems_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&numitems_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:DataApi.DirectoryInfo)
}

void DirectoryInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&numitems_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&numitems_)) + sizeof(date_));
}

DirectoryInfo::~DirectoryInfo() {
  // @@protoc_insertion_point(destructor:DataApi.DirectoryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectoryInfo::ArenaDtor(void* object) {
  DirectoryInfo* _this = reinterpret_cast< DirectoryInfo* >(object);
  (void)_this;
}
void DirectoryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DataApi.DirectoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&numitems_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&numitems_)) + sizeof(date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.DirectoryInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 numItems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          numitems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectoryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataApi.DirectoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.DirectoryInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 numItems = 2;
  if (this->numitems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_numitems(), target);
  }

  // int64 date = 3;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataApi.DirectoryInfo)
  return target;
}

size_t DirectoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataApi.DirectoryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 numItems = 2;
  if (this->numitems() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_numitems());
  }

  // int64 date = 3;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectoryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataApi.DirectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectoryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectoryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataApi.DirectoryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataApi.DirectoryInfo)
    MergeFrom(*source);
  }
}

void DirectoryInfo::MergeFrom(const DirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataApi.DirectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.numitems() != 0) {
    _internal_set_numitems(from._internal_numitems());
  }
  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
}

void DirectoryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataApi.DirectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryInfo::CopyFrom(const DirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataApi.DirectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryInfo::IsInitialized() const {
  return true;
}

void DirectoryInfo::InternalSwap(DirectoryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectoryInfo, date_)
      + sizeof(DirectoryInfo::date_)
      - PROTOBUF_FIELD_OFFSET(DirectoryInfo, numitems_)>(
          reinterpret_cast<char*>(&numitems_),
          reinterpret_cast<char*>(&other->numitems_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FileInfo::_Internal {
 public:
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataApi.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&size_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:DataApi.FileInfo)
}

void FileInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&size_)) + sizeof(date_));
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:DataApi.FileInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::ArenaDtor(void* object) {
  FileInfo* _this = reinterpret_cast< FileInfo* >(object);
  (void)_this;
}
void FileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DataApi.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_) -
      reinterpret_cast<char*>(&size_)) + sizeof(date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.FileInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataApi.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.FileInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // int64 date = 3;
  if (this->date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataApi.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataApi.FileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int64 date = 3;
  if (this->date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataApi.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataApi.FileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataApi.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataApi.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.date() != 0) {
    _internal_set_date(from._internal_date());
  }
}

void FileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataApi.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataApi.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, date_)
      + sizeof(FileInfo::date_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageInfo::_Internal {
 public:
};

ImageInfo::ImageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dimensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataApi.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  filetype_ = from.filetype_;
  // @@protoc_insertion_point(copy_constructor:DataApi.ImageInfo)
}

void ImageInfo::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filetype_ = 0;
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:DataApi.ImageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::ArenaDtor(void* object) {
  ImageInfo* _this = reinterpret_cast< ImageInfo* >(object);
  (void)_this;
}
void ImageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DataApi.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  filename_.ClearToEmpty();
  filetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.ImageInfo.fileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataApi.FileType fileType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filetype(static_cast<::DataApi::FileType>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 dimensions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataApi.ImageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.ImageInfo.fileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .DataApi.FileType fileType = 2;
  if (this->filetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_filetype(), target);
  }

  // repeated int32 dimensions = 3;
  {
    int byte_size = _dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_dimensions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataApi.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataApi.ImageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dimensions = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .DataApi.FileType fileType = 2;
  if (this->filetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataApi.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataApi.ImageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataApi.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataApi.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.filetype() != 0) {
    _internal_set_filetype(from._internal_filetype());
  }
}

void ImageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataApi.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataApi.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(filetype_, other->filetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageInfoRequest::_Internal {
 public:
};

ImageInfoRequest::ImageInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DataApi.ImageInfoRequest)
}
ImageInfoRequest::ImageInfoRequest(const ImageInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directoryname().empty()) {
    directoryname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directoryname(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  hdu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdu().empty()) {
    hdu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hdu(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DataApi.ImageInfoRequest)
}

void ImageInfoRequest::SharedCtor() {
directoryname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hdu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ImageInfoRequest::~ImageInfoRequest() {
  // @@protoc_insertion_point(destructor:DataApi.ImageInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  directoryname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hdu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageInfoRequest::ArenaDtor(void* object) {
  ImageInfoRequest* _this = reinterpret_cast< ImageInfoRequest* >(object);
  (void)_this;
}
void ImageInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImageInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DataApi.ImageInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directoryname_.ClearToEmpty();
  filename_.ClearToEmpty();
  hdu_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string directoryName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directoryname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.ImageInfoRequest.directoryName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fileName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.ImageInfoRequest.fileName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hdu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hdu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataApi.ImageInfoRequest.hdu"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataApi.ImageInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directoryName = 1;
  if (this->directoryname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directoryname().data(), static_cast<int>(this->_internal_directoryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.ImageInfoRequest.directoryName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directoryname(), target);
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.ImageInfoRequest.fileName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdu().data(), static_cast<int>(this->_internal_hdu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataApi.ImageInfoRequest.hdu");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hdu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataApi.ImageInfoRequest)
  return target;
}

size_t ImageInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataApi.ImageInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directoryName = 1;
  if (this->directoryname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directoryname());
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataApi.ImageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataApi.ImageInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataApi.ImageInfoRequest)
    MergeFrom(*source);
  }
}

void ImageInfoRequest::MergeFrom(const ImageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataApi.ImageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directoryname().size() > 0) {
    _internal_set_directoryname(from._internal_directoryname());
  }
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.hdu().size() > 0) {
    _internal_set_hdu(from._internal_hdu());
  }
}

void ImageInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataApi.ImageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfoRequest::CopyFrom(const ImageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataApi.ImageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfoRequest::IsInitialized() const {
  return true;
}

void ImageInfoRequest::InternalSwap(ImageInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  directoryname_.Swap(&other->directoryname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hdu_.Swap(&other->hdu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DataApi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DataApi::FileListRequest* Arena::CreateMaybeMessage< ::DataApi::FileListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataApi::FileListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DataApi::FileList* Arena::CreateMaybeMessage< ::DataApi::FileList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataApi::FileList >(arena);
}
template<> PROTOBUF_NOINLINE ::DataApi::DirectoryInfo* Arena::CreateMaybeMessage< ::DataApi::DirectoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataApi::DirectoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DataApi::FileInfo* Arena::CreateMaybeMessage< ::DataApi::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataApi::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DataApi::ImageInfo* Arena::CreateMaybeMessage< ::DataApi::ImageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataApi::ImageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DataApi::ImageInfoRequest* Arena::CreateMaybeMessage< ::DataApi::ImageInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataApi::ImageInfoRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
